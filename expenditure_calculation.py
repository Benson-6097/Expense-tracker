# -*- coding: utf-8 -*-
"""Expenditure Calculation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16SPsD2t2lRWolSygSlkqDcXHDKeLrT5A
"""

# 支出追蹤系統 (適用於 Google Colab，儲存為 Excel 格式，手動輸入日期，每 runtime 分開工作表，每 runtime 結餘獨立儲存，結餘顯示誰付誰，折扣與服務費以百分比計算，服務費預設10%，服務費基於原始金額，折扣公式為原價-原價*折扣%)
import pandas as pd
from datetime import datetime

def initialize_excel():
    # 初始化空的 Excel 檔案（如果不存在）
    try:
        pd.read_excel('expenses.xlsx', sheet_name='Expenses_1')
    except FileNotFoundError:
        df = pd.DataFrame(columns=['日期', '描述', '原始金額', '折扣百分比', '折扣金額', '服務費百分比', '服務費金額', '調整後金額', '支付人', '欠款人'])
        with pd.ExcelWriter('expenses.xlsx', engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Expenses_1', index=False)

def get_current_runtime_and_sheet():
    # 檢查現有工作表，決定當前 runtime 的工作表名稱和 runtime 編號
    try:
        xls = pd.ExcelFile('expenses.xlsx')
        existing_sheets = xls.sheet_names
        expense_sheets = [s for s in existing_sheets if s.startswith('Expenses_')]
        if not expense_sheets:
            return 1, 'Expenses_1'
        max_num = 0
        for sheet in expense_sheets:
            try:
                num = int(sheet.split('_')[1])
                max_num = max(max_num, num)
            except (IndexError, ValueError):
                pass
        return max_num + 1, f'Expenses_{max_num + 1}'
    except FileNotFoundError:
        return 1, 'Expenses_1'

def add_person_to_people(people, person):
    if person not in people:
        people.append(person)

def get_date_input():
    print("\n日期選項：")
    print("1. 手動輸入日期 (格式：YYYY-MM-DD，例如 2025-08-29)")
    print("2. 選擇今日日期")
    print("3. 輸入 N/A")
    choice = input("選擇日期選項 (1-3)：")

    if choice == "1":
        while True:
            date_input = input("輸入日期 (YYYY-MM-DD)：")
            try:
                datetime.strptime(date_input, '%Y-%m-%d')
                return date_input
            except ValueError:
                print("無效日期格式，請使用 YYYY-MM-DD 格式重試。")
    elif choice == "2":
        return datetime.now().strftime('%Y-%m-%d')
    elif choice == "3":
        return "N/A"
    else:
        print("無效選項，使用 N/A。")
        return "N/A"

def add_expense(people, sheet_name):
    print("\n輸入費用詳情：")
    description = input("費用描述：")

    # 輸入原始金額
    while True:
        try:
            original_amount = float(input("原始金額："))
            if original_amount < 0:
                print("金額不能為負，請重新輸入。")
                continue
            break
        except ValueError:
            print("請輸入有效數字。")

    # 詢問是否有折扣
    discount_percentage = 0
    discount_amount = 0
    has_discount = input("是否有折扣？(是/否)：").strip().lower() in ['是', 'y', 'yes']
    if has_discount:
        while True:
            try:
                discount_percentage = float(input("折扣百分比 (0-100，例如 75 表示 75%)："))
                if discount_percentage < 0 or discount_percentage > 100:
                    print("折扣百分比必須在 0 到 100 之間，請重新輸入。")
                    continue
                break
            except ValueError:
                print("請輸入有效數字。")
        discount_amount = original_amount * (discount_percentage / 100)

    # 計算折扣後金額
    discounted_amount = original_amount - discount_amount

    # 詢問是否有服務費，預設 10%
    service_fee_percentage = 0
    service_fee_amount = 0
    has_service_fee = input("是否有服務費？(是/否)：").strip().lower() in ['是', 'y', 'yes']
    if has_service_fee:
        while True:
            try:
                service_fee_input = input("服務費百分比 (0-100，例如 15 表示 15%，按 Enter 使用預設 10%)：").strip()
                if service_fee_input == "":
                    service_fee_percentage = 10  # 預設 10%
                else:
                    service_fee_percentage = float(service_fee_input)
                    if service_fee_percentage < 0 or service_fee_percentage > 100:
                        print("服務費百分比必須在 0 到 100 之間，請重新輸入。")
                        continue
                break
            except ValueError:
                print("請輸入有效數字或按 Enter 使用預設值。")
        service_fee_amount = original_amount * (service_fee_percentage / 100)  # 服務費基於原始金額

    # 計算調整後金額
    adjusted_amount = discounted_amount + service_fee_amount
    print(f"調整後金額：${adjusted_amount:.2f} (原始金額: ${original_amount:.2f}, 折扣: {discount_percentage}% = ${discount_amount:.2f}, 服務費: {service_fee_percentage}% = ${service_fee_amount:.2f})")

    paid_by = input("誰支付？（輸入姓名）：").strip()

    # 驗證並添加支付人
    add_person_to_people(people, paid_by)

    # 獲取日期
    date = get_date_input()

    # 選擇分攤方式
    print("\n分攤方式：")
    print("1. 平均分攤")
    print("2. 自訂分攤")
    split_choice = input("選擇分攤方式 (1 或 2)：")

    new_expenses = []
    if split_choice == "1":
        # 平均分攤
        split_amount = adjusted_amount / len(people)
        for person in people:
            if person != paid_by:
                new_expenses.append({
                    '日期': date,
                    '描述': description,
                    '原始金額': original_amount,
                    '折扣百分比': discount_percentage,
                    '折扣金額': discount_amount,
                    '服務費百分比': service_fee_percentage,
                    '服務費金額': service_fee_amount,
                    '調整後金額': split_amount,
                    '支付人': paid_by,
                    '欠款人': person
                })
    else:
        # 自訂分攤
        while True:
            print("\n輸入每人應付金額（若不適用請輸入 0）：")
            total_owed = 0
            temp_expenses = []
            for person in people:
                if person != paid_by:
                    while True:
                        try:
                            owed = float(input(f"{person} 應付金額："))
                            if owed < 0:
                                print("金額不能為負，請重新輸入。")
                                continue
                            break
                        except ValueError:
                            print("請輸入有效數字。")
                    if owed > 0:
                        total_owed += owed
                        temp_expenses.append({
                            '日期': date,
                            '描述': description,
                            '原始金額': original_amount,
                            '折扣百分比': discount_percentage,
                            '折扣金額': discount_amount,
                            '服務費百分比': service_fee_percentage,
                            '服務費金額': service_fee_amount,
                            '調整後金額': owed,
                            '支付人': paid_by,
                            '欠款人': person
                        })

            if abs(total_owed - adjusted_amount) <= 0.01:  # 允許小額浮點數差異
                new_expenses.extend(temp_expenses)
                break
            else:
                print(f"錯誤：總應付金額 ({total_owed:.2f}) 與調整後金額 ({adjusted_amount:.2f}) 不符，請重新輸入。")

    # 將新費用追加到當前工作表
    try:
        df = pd.read_excel('expenses.xlsx', sheet_name=sheet_name)
    except (FileNotFoundError, ValueError):
        df = pd.DataFrame(columns=['日期', '描述', '原始金額', '折扣百分比', '折扣金額', '服務費百分比', '服務費金額', '調整後金額', '支付人', '欠款人'])

    new_df = pd.DataFrame(new_expenses)
    df = pd.concat([df, new_df], ignore_index=True)
    with pd.ExcelWriter('expenses.xlsx', engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

def calculate_balances(sheet_name):
    # 僅讀取當前 runtime 的工作表
    try:
        df = pd.read_excel('expenses.xlsx', sheet_name=sheet_name)
    except (FileNotFoundError, ValueError):
        df = pd.DataFrame(columns=['日期', '描述', '原始金額', '折扣百分比', '折扣金額', '服務費百分比', '服務費金額', '調整後金額', '支付人', '欠款人'])

    people = list(set(df['支付人'].tolist() + df['欠款人'].tolist()))
    balances = {person: 0 for person in people}

    for _, row in df.iterrows():
        balances[row['支付人']] += row['調整後金額']
        balances[row['欠款人']] -= row['調整後金額']

    return balances, df

def settle_debts(balances):
    # 債務結算：將正負餘額配對，生成誰付誰的清單
    transactions = []
    debtors = [(person, balance) for person, balance in balances.items() if balance < -0.01]
    creditors = [(person, balance) for person, balance in balances.items() if balance > 0.01]

    # 按金額排序以優化配對
    debtors.sort(key=lambda x: x[1])  # 負餘額，升序（最小負值先）
    creditors.sort(key=lambda x: x[1], reverse=True)  # 正餘額，降序（最大正值先）

    while debtors and creditors:
        debtor, debt = debtors[0]
        creditor, credit = creditors[0]
        debt = -debt  # 轉為正數以便計算
        amount = min(debt, credit)

        if amount > 0.01:  # 忽略小額差異
            transactions.append({
                '付款人': debtor,
                '收款人': creditor,
                '金額': round(amount, 2)
            })

        # 更新餘額
        debt -= amount
        credit -= amount

        # 更新列表：僅保留未結清的債務人和債權人
        if debt <= 0.01:
            debtors.pop(0)
        else:
            debtors[0] = (debtor, -debt)
        if credit <= 0.01:
            creditors.pop(0)
        else:
            creditors[0] = (creditor, credit)

    return transactions

def save_balances_to_excel(transactions, runtime_count):
    # 儲存最終結餘到 Final_Balances_N 工作表
    balance_data = [{'付款人': t['付款人'], '收款人': t['收款人'], '金額': t['金額']} for t in transactions]
    balance_df = pd.DataFrame(balance_data)
    balance_sheet_name = f'Final_Balances_{runtime_count}'
    with pd.ExcelWriter('expenses.xlsx', engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
        balance_df.to_excel(writer, sheet_name=balance_sheet_name, index=False)

def display_summary(runtime_count, sheet_name):
    balances, df = calculate_balances(sheet_name)

    print("\n=== 費用總覽 ===")
    for _, row in df.iterrows():
        print(f"{row['日期']} - {row['描述']}：{row['支付人']} 支付 ${row['調整後金額']:.2f} (原始金額: ${row['原始金額']:.2f}, 折扣: {row['折扣百分比']}% = ${row['折扣金額']:.2f}, 服務費: {row['服務費百分比']}% = ${row['服務費金額']:.2f})，由 {row['欠款人']} 欠款")

    print("\n=== 最終結餘 ===")
    transactions = settle_debts(balances)
    if not transactions:
        print("無需結算，所有人已結清。")
    else:
        for t in transactions:
            print(f"{t['付款人']} 應支付 ${t['金額']:.2f} 給 {t['收款人']}")

    # 儲存結餘到 Excel
    save_balances_to_excel(transactions, runtime_count)
    print(f"\n最終結餘已儲存至 expenses.xlsx 的 Final_Balances_{runtime_count} 工作表。")

def main():
    print("歡迎使用支出追蹤系統！")
    people = input("輸入參與者姓名（以逗號分隔）：").split(',')
    people = [p.strip() for p in people]

    # 初始化 Excel 檔案並獲取當前 runtime 的工作表名稱和 runtime 編號
    initialize_excel()
    runtime_count, sheet_name = get_current_runtime_and_sheet()

    # 添加初始參與者
    for person in people:
        add_person_to_people(people, person)

    while True:
        print("\n選項：")
        print("1. 新增費用")
        print("2. 查看總覽")
        print("3. 退出")
        choice = input("選擇一個選項 (1-3)：")

        if choice == "1":
            add_expense(people, sheet_name)
        elif choice == "2":
            display_summary(runtime_count, sheet_name)
        elif choice == "3":
            print("正在退出...")
            break
        else:
            print("無效選項，請重試。")

if __name__ == "__main__":
    main()